///////////////////////////////////////////////////////////
//  Weapon.cs
//  Implementation of the Class Weapon
//  Generated by Enterprise Architect
//  Created on:      04-ноя-2014 12:01:13
//  Original author: Samurai
///////////////////////////////////////////////////////////



using System.Collections.Generic;

public enum TypeWeapon
{
    Heavy,
    Assault,
    Pistol
}


public class Weapon 
{

	protected int ArmorPenetretion = 7;
	protected int Strenght;
    protected int Distance;
    protected TypeWeapon Type;
    public List<EffectsWeapons> Effects;
    protected int Shoots;
	protected int StrenghtModificationMute;
	protected int StrenghtModificationPlus;
	public BasicModel w_BasicModel;

    public virtual int IsHtHWeapon()
    {
        return 0;
    }

    public Weapon(int s,int ap,int shoots,int strmP,int strmM,List<EffectsWeapons> Eff)
    {
        ArmorPenetretion = ap;
        Shoots = shoots;
        Strenght = s;
        StrenghtModificationMute = strmM;
        StrenghtModificationPlus = strmP;
        Effects = Eff;
    }

	public Weapon()
    {
        Strenght = 4;
        Type = TypeWeapon.Assault;
        Shoots = 2;
        Effects = new List<EffectsWeapons> { };
	}

    public virtual List<Wound> HeadToHead(int atack,int S)
    {
        List<Wound> L = new List<Wound> { };
        for (int i = 0; i < atack; i++)
        {
            L.Add(new Wound(w_BasicModel.WeaponSkill,S,7,Effects.ToArray(),w_BasicModel));
        }
        return null;
    }

    public virtual List<Wound> SnapShoots(int Dis)
    {
        return Shoot(1, 0, Dis);
    }

    public virtual List<Wound> Shoot(int moved,int bs,int Dis)
    {   
        List<Wound> L = new List<Wound> { };
        if (Dis<Distance)
        {
            for (int i = 0; i < Shoots; i++)
            {
                L.Add(new Wound(Dis,Strenght, ArmorPenetretion, Effects.ToArray(), bs, w_BasicModel));
            }
        }
        return L;
    }

	~Weapon()
    {

	}

	public virtual void Dispose(){

	}

}//end Weapon

public class Assault : Weapon
{
    public Assault(int Dist,int s,int ap,int shoots,List<EffectsWeapons> Eff)
    {
        Distance=Dist;
        ArmorPenetretion = ap;
        Shoots = shoots;
        Strenght = s;
        Type = TypeWeapon.Assault;
        Effects = Eff;
    }

    public override List<Wound> Shoot(int moved, int bs,int Dis)
    {
        return base.Shoot(moved, bs,Dis);
    }
}
public class Heavy : Weapon
{
    public Heavy(int Dist,int s,int ap,int shoots,List<EffectsWeapons> Eff)
    {
        ArmorPenetretion = ap;
        Distance=Dist;
        Shoots = shoots;
        Strenght = s;
        Effects = Eff;
        Type = TypeWeapon.Heavy;
    }

    public override List<Wound> Shoot(int moved, int bs,int Dis)
    {
        if (moved == 0)
        {
            return base.Shoot(moved, bs,Dis);
        }
        return base.Shoot(moved, 1,Dis);
    }
}
public class Pistol : Weapon
{
    public Pistol(int Dist,int s,int ap,List<EffectsWeapons> Eff)
    {
        Distance = Dist;
        ArmorPenetretion = ap;
        Shoots = 1;
        Strenght = s;
        Effects = Eff;
        Type = TypeWeapon.Pistol;
    }

    public override List<Wound> Shoot(int moved, int bs,int Dist)
    {
        return base.Shoot(moved, bs,Dist);
    }
}

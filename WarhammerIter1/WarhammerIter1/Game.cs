///////////////////////////////////////////////////////////
//  Game.cs
//  Implementation of the Class Game
//  Generated by Enterprise Architect
//  Created on:      04-ноя-2014 12:03:36
//  Original author: User
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Windows.Forms;

public interface PfaseSr
{
    void MousClick(int x, int y,Game _g);
    void ActButtonClick(Game _g);
}


public class PfaseNofing:PfaseSr
{
    public void MousClick(int x, int y, Game _g) 
    {

    }
    public void ActButtonClick(Game _g)
    {
        
    }
}


public class PfaseShoot : PfaseSr
{
    public void MousClick(int x, int y, Game _g)
    {
        Unit un=_g.IsMap.FindUnit(x, y);
        if(un !=null)
        {
            if (un.w_Player == _g.PlayerNow())
                _g.Sourse = un;
            else
                _g.Target = un;
        }
    }
    public void ActButtonClick(Game _g)
    {
        _g.Shooting();
    }
}

public class PfaseChose : PfaseSr
{
    public void MousClick(int x, int y, Game _g)
    {
        //Unit unit = _g.IsMap.FindUnit(x, y); //IsMap - current map
        _g.cur_model = _g.IsMap.FindModel(x, y);
        _g.cur_unit = _g.cur_model.w_Unit;

    }
    public void ActButtonClick(Game _g)
    {
        if (_g.cur_unit.Moved != 0)
        {
            MessageBox.Show("Вы уже перемещали этот отряд.");
        }
        else
            _g.NowPfaseStr = _g.MovePf;
    }
}

public class PfaseMove : PfaseSr
{
    public void MousClick(int x, int y, Game _g)
    {
        //if()
        if ((x - _g.cur_model.start_x) * (x - _g.cur_model.start_x) + (y - _g.cur_model.start_y) * (y - _g.cur_model.start_y) <= _g.length * _g.length)
        {
            _g.cur_model.x = x;
            _g.cur_model.y = y;
        }
        else
        {
            MessageBox.Show("Расстояние перемещения слишком велико.");
        }
    }
    public void ActButtonClick(Game _g)
    {
        _g.cur_model.w_Unit.Moved = 1;
    }
}

public enum Pfase
{
    Move,
    Shoot,
    Charge,
    End
}

public class Game 
{
    public PfaseSr NowPfaseStr;
    public PfaseSr MovePf = new PfaseMove();
    public PfaseSr ChosePf = new PfaseChose();
    public PfaseSr NofingPf = new PfaseNofing();
    public PfaseSr ShootPf = new PfaseShoot();
	private int NowPlayer;
    private Pfase NowPhase;
	private Player[] Players;
    public Map IsMap;
    public MapInterfeise IsMapInter = new MapInterfeise();
    public MiniMap IsMiniMap = new MiniMap();
	private int Turn;
    public Unit Target {get;set;}
    public Unit Sourse {get;set;}
    public intMission NowMission;
    private DiceGenerator DiceGen;
    public BasicModel cur_model;
    public Unit cur_unit;
    public int length = 600;

    public  bool IsNowPfase(Pfase p)
    {
        if (p == NowPhase)
            return true;
        return false;
    }

    private void EndPfase()
    {
        foreach (Player p in Players)
        {
            foreach (Unit U in p.PlayersUnit)
            {
                U.EndPfase(NowPhase, Players[NowPlayer]);
            }
        }
        switch(NowPhase)
        {
            case Pfase.Move:
                break;
            case Pfase.Shoot:
                break;
            case Pfase.Charge:

                break;
        }
    }

    private void BeginPfase()
    {
        foreach (Player p in Players)
        {
            foreach (Unit U in p.PlayersUnit)
            {
                U.EndPfase(NowPhase, Players[NowPlayer]);
            }
        }
        switch (NowPhase)
        {
            case Pfase.Move:
                MessageBox.Show("Фаза движения");
                NowPfaseStr = ChosePf;
                break;
            case Pfase.Shoot:
                MessageBox.Show("Фаза стрельбы");
                NowPfaseStr = ShootPf;
                break;
            case Pfase.Charge:
                MessageBox.Show("Фаза атаки");
                NowPfaseStr = NofingPf;
                break;
        }
    }

    public void NextPfase()
    {
        EndPfase();
        NowPhase++;
        if(NowPhase==Pfase.End)
        {
            NowPhase = Pfase.Move;
            NowPlayer++;
            Unit p=Target;
            Target = Sourse;
            Sourse = p;
            if(NowPlayer==2)
            {
                NowPlayer = 0;

                if(Turn==5)
                {
                    if(DiceGen.D6()<=4)
                    {
                        MessageBox.Show("Конец игры");
                    }
                }
                if (Turn == 6)
                {
                    if (DiceGen.D6() <= 5)
                    {
                        MessageBox.Show("Конец игры");
                    }
                }
                if (Turn == 7)
                {
                    MessageBox.Show("Конец игры");
                } 
                Turn++;
                MessageBox.Show("Новый ход");
            }
            else
            {
                MessageBox.Show("Следующий игрок");
            }
        }
        else
        {
            //MessageBox.Show("Новая фаза");
        }
        BeginPfase();
    }

    public Player PlayerNow()
    {
        return Players[NowPlayer];
    }

    public void MouseClick(int x,int y)
    {
        NowPfaseStr.MousClick(x, y,this);
    }

    public void ClickActionButton()
    {
       /* switch(NowPhase)
        {
            case Pfase.Move:
                break;
            case Pfase.Shoot:
                Shooting(Target, 0, Sourse);
                break;
            case Pfase.Charge:
                break;
        }*/
        NowPfaseStr.ActButtonClick(this);
    }

	public Game()
    {
        NowPfaseStr = ShootPf;
        List<Unit> LUnit = new List<Unit> {};
        NowMission = new EturnalWar1();
        DiceGen = new DiceGenerator();
        Players = new Player[2];
        Players[0] = new Player();
        Players[1] = new Player();
        NowPlayer = 0;
        NowPhase = Pfase.Shoot;
        Turn = 1;
        Sourse = Players[0].PlayersUnit[0];
        Sourse.Models[0].x += 300;
        Sourse.Models[1].x += 300;
        Sourse.Models[2].x += 300;
        Target = Players[1].PlayersUnit[0];
        foreach(Player p in Players)
        {
            LUnit.AddRange(p.GetUnits());
        }
        IsMap = new Map(LUnit);
	}

	~Game()
    {

	}
	public int Shooting(Unit Target, int WeaponTyper, Unit Sourse)
    {
        int Cover = 7;
        List<Wound> L = new List<Wound> { };
        L = Sourse.Shoot(Target,0,DiceGen);
        if (L == null)
            return 0;
        L = Target.Wonding(Sourse, L, DiceGen);
        if (L == null)
            return 0;
        Target.Save(Cover, Sourse,L, DiceGen);
		return 0;
	}

    public int Shooting()
    {
        int Cover = 7;
        List<Wound> L = new List<Wound> { };
        L = Sourse.Shoot(Target, 0, DiceGen);
        if (L == null || L.Count==0)
            return 0;
        L = Target.Wonding(Sourse, L, DiceGen);
        if (L == null || L.Count == 0)
            return 0;
        Target.Save(Cover, Sourse, L, DiceGen);
        return 0;
    }

	public void Wounding(Unit Target, Wound[] Shots, int HowManyShot)
    {

	}

}//end Game